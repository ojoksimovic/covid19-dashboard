[{"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\index.js":"1","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\reportWebVitals.js":"2","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\App.js":"3","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\DataFetch.js":"4","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\GlobalGraphs.js":"5","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\SearchPage.js":"6","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\utils.js":"7","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\ComparePage.js":"8","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\CountryPage.js":"9","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\ContinentCharts.js":"10","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\GlobalCards.js":"11","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\ContinentCards.js":"12","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\GlobalTable.js":"13","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\TopCountryCard.js":"14","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\CompareGraphs.js":"15","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\CompareTable.js":"16","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\CountryVaccinePie.js":"17","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\Footer.js":"18","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\MUIGlobalTable.js":"19"},{"size":595,"mtime":1613243959313,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":1350,"mtime":1613236812074,"results":"23","hashOfConfig":"21"},{"size":6161,"mtime":1615076010065,"results":"24","hashOfConfig":"21"},{"size":22372,"mtime":1633299741425,"results":"25","hashOfConfig":"21"},{"size":1753,"mtime":1615076169155,"results":"26","hashOfConfig":"21"},{"size":3318,"mtime":1610304531779,"results":"27","hashOfConfig":"21"},{"size":3353,"mtime":1615134753585,"results":"28","hashOfConfig":"21"},{"size":45207,"mtime":1638744613108,"results":"29","hashOfConfig":"21"},{"size":10813,"mtime":1613950359032,"results":"30","hashOfConfig":"21"},{"size":5342,"mtime":1615162028781,"results":"31","hashOfConfig":"21"},{"size":4365,"mtime":1613950313305,"results":"32","hashOfConfig":"21"},{"size":5393,"mtime":1624977318680,"results":"33","hashOfConfig":"21"},{"size":4633,"mtime":1615162625371,"results":"34","hashOfConfig":"21"},{"size":8064,"mtime":1615061805399,"results":"35","hashOfConfig":"21"},{"size":13679,"mtime":1633299865727,"results":"36","hashOfConfig":"21"},{"size":3389,"mtime":1633299741422,"results":"37","hashOfConfig":"21"},{"size":564,"mtime":1615076048936,"results":"38","hashOfConfig":"21"},{"size":13710,"mtime":1633299741427,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"nm6njv",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"42"},"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\index.js",[],["91","92"],"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\App.js",[],"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\DataFetch.js",["93","94","95"],"import \"./index.css\";\r\nimport React from \"react\";\r\nimport \"./utils\";\r\nimport axios from 'axios';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n} from \"react-router-dom\";\r\nimport GlobalGraphs from './GlobalGraphs';\r\nimport CountryPage from \"./CountryPage\";\r\nimport SearchPage from \"./SearchPage\";\r\nimport ComparePage from \"./ComparePage\";\r\n\r\nlet countryRouter = [];\r\n\r\nclass DataFetch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.CountryName = this.CountryName.bind(this);\r\n        this.CountryList = this.CountryList.bind(this);\r\n        this.ComparePageList = this.ComparePageList.bind(this);\r\n        this.state = {\r\n            historyGlobal: null,\r\n            historyCountries: null,\r\n            cases: null,\r\n            casesContinents: null,\r\n            casesCountries: null,\r\n            vaccineGlobal: null,\r\n            vaccineCountries: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.all([\r\n            axios.get('https://disease.sh/v3/covid-19/all?yesterday=false'),\r\n            axios.get('https://disease.sh/v3/covid-19/historical/all?lastdays=all'),\r\n            axios.get('https://disease.sh/v3/covid-19/historical?lastdays=all'),\r\n            axios.get('https://disease.sh/v3/covid-19/continents?yesterday=false&twoDaysAgo=false&allowNull=true'),\r\n            axios.get('https://disease.sh/v3/covid-19/countries?yesterday=false&twoDaysAgo=false&sort=cases&allowNull=true'),\r\n            axios.get('https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=all'),\r\n            axios.get('https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=all')\r\n        ])\r\n            .then(axios.spread((req1, req2, req3, req4, req5, req6, req7) => {\r\n                this.setState({\r\n                    cases: req1.data,\r\n                    historyGlobal: req2.data,\r\n                    historyCountries: req3.data,\r\n                    casesContinents: req4.data,\r\n                    casesCountries: req5.data,\r\n                    vaccineGlobal: req6.data,\r\n                    vaccineCountries: req7.data\r\n                });\r\n            }));\r\n    }\r\n\r\n  capitalizeFirstLetter(mySentence){\r\n    const words = mySentence.split(\"%20\");\r\n    for (let i = 0; i < words.length; i++) {\r\n        words[i] = words[i][0].toUpperCase() + words[i].substr(1);\r\n    }\r\n    let newName = words.join(\" \");\r\n    return newName\r\n}\r\n    \r\nCountryName(props) {\r\n    let XStats;\r\n    let XCountry = this.capitalizeFirstLetter(props.match.params.countryname);\r\n    for (let i = 0; i < this.state.casesCountries.length; i++) {\r\n        if (this.state.casesCountries[i][\"country\"].toLowerCase() == props.match.params.countryname.toLowerCase()) {\r\n          XStats = this.state.casesCountries[i]\r\n        }\r\n      }\r\n    let XProvinceHistory =[];\r\n    for (let i = 0; i < this.state.historyCountries.length; i++){\r\n        if (this.state.historyCountries[i][\"country\"].toLowerCase() == [props.match.params.countryname.toLowerCase()] && this.state.historyCountries[i][\"province\"] != null) {\r\n            XProvinceHistory.push(this.state.historyCountries[i])\r\n        }\r\n    }\r\n    return <CountryPage\r\n    XStats = {XStats}\r\n    XProvinceHistory = {XProvinceHistory}\r\n    XCountry = {XCountry}\r\n    XVaccineCountries = {this.state.vaccineCountries}\r\n    cases={this.state.cases}\r\n    />\r\n  }\r\n  CountryList(){\r\n      console.log(this.state.casesCountries)\r\n      let countryList = [];\r\n    for (let i = 0; i < this.state.casesCountries.length; i++) {\r\n        countryList.push(\r\n            { flag: this.state.casesCountries[i].countryInfo.flag,\r\n                name:this.state.casesCountries[i].country\r\n    })}\r\n    console.log(countryList);\r\n    return <SearchPage\r\n    countryList = {countryList}\r\n    cases={this.state.cases}\r\n    />\r\n  }\r\n\r\n  ComparePageList(){\r\n    console.log(this.state.historyCountries)\r\n    let countryList = [];\r\n  for (let i = 0; i < this.state.casesCountries.length; i++) {\r\n      countryList.push(\r\n          { flag: this.state.casesCountries[i].countryInfo.flag,\r\n              name:this.state.casesCountries[i].country\r\n  })}\r\n\r\n  \r\n  return <ComparePage\r\n  countryList = {countryList}\r\n  casesCountries = {this.state.casesCountries}\r\n  historyCountries = {this.state.historyCountries}\r\n  vaccineCountries = {this.state.vaccineCountries}\r\n  cases={this.state.cases}\r\n  />\r\n}\r\n\r\n    render() {\r\n\r\n        if (this.state.cases == null || this.state.historyCountries == null || this.state.casesContinents == null) {\r\n            return (\r\n                <div class=\"text-center\">\r\n\r\n                    <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n                        <span className=\"visually-hidden\"></span>\r\n                    </div>\r\n                    <h3 id=\"loading-text\">Loading...</h3>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\"><Redirect to=\"/global\" /></Route>\r\n                    <Route path=\"/country/:countryname\" component={this.CountryName} />\r\n                    <Route\r\n                        path=\"/global\"\r\n                        render={() =>\r\n                            <GlobalGraphs\r\n                                casesCountries={this.state.casesCountries}\r\n                                cases={this.state.cases}\r\n                                casesContinents={this.state.casesContinents}\r\n                                historyGlobal={this.state.historyGlobal}\r\n                                historyCountries={this.state.historyCountries}\r\n                                vaccineGlobal={this.state.vaccineGlobal}\r\n                                vaccineCountries = {this.state.vaccineCountries}\r\n                            />} />\r\n              <Route path=\"/search\" component={this.CountryList} />\r\n              <Route path=\"/compare\" component={this.ComparePageList} />\r\n\r\n                </Switch>\r\n            </Router>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataFetch;","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\GlobalGraphs.js",["96","97","98","99"],"import \"./index.css\";\r\nimport React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Chart from \"chart.js\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport \"./utils\";\r\nimport MediaCard from \"./GlobalCards\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport ContinentCharts from \"./ContinentCharts\";\r\nimport ContinentCards from \"./ContinentCards\";\r\nimport GlobalTable from \"./GlobalTable\";\r\nimport TopCountryCard from \"./TopCountryCard\";\r\nimport Footer from \"./Footer\";\r\nimport EnhancedTable from \"./MUIGlobalTable\";\r\n\r\nlet backGroundColorArray = [\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n  \"rgb(255, 99, 132)\",\r\n  \"rgb(255, 159, 64)\",\r\n  \"rgb(255, 205, 86)\",\r\n  \"rgb(75, 192, 192)\",\r\n  \"rgb(54, 162, 235)\",\r\n  \"rgb(153, 102, 255)\",\r\n  \"rgb(201, 203, 207)\",\r\n  \"#4dc9f6\",\r\n  \"#f67019\",\r\n  \"#f53794\",\r\n  \"#537bc4\",\r\n  \"#acc236\",\r\n  \"#166a8f\",\r\n  \"#00a950\",\r\n  \"#58595b\",\r\n  \"#8549ba\",\r\n];\r\n\r\nclass GlobalGraphs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.worldConfirmedChart = this.worldConfirmedChart.bind(this);\r\n    this.worldConfirmedLogChart = this.worldConfirmedLogChart.bind(this);\r\n    this.worldVaccineChart = this.worldVaccineChart.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.worldConfirmedChart();\r\n    this.worldConfirmedLogChart();\r\n    this.worldVaccineChart();\r\n  }\r\n\r\n  worldVaccinePie() {\r\n    let labelVaccine = [\"Vaccinated\", \"Not Vaccinated\"];\r\n    var vac = Object.values(this.props.vaccineGlobal);\r\n    let totalVaccinated = vac[vac.length - 1]/2;\r\n    let totalUnVaccinated = this.props.cases.population - totalVaccinated;\r\n    let arrayVaccinated = [totalVaccinated, totalUnVaccinated];\r\n    let percentVaccinated = (\r\n      totalVaccinated / this.props.cases.population\r\n    ).toLocaleString(undefined, { style: \"percent\", minimumFractionDigits: 2 });\r\n\r\n    return (\r\n      <Card style={{ marginBottom: \"10px\" }}>\r\n        <CardContent>\r\n          <Pie\r\n            data={{\r\n              labels: labelVaccine,\r\n              datasets: [\r\n                {\r\n                  label: \"Vaccinated\",\r\n                  backgroundColor: [\"rgb(54, 162, 235)\", \"rgb(255, 99, 132)\"],\r\n                  hoverBackgroundColor: [\r\n                    \"rgb(54, 162, 235)\",\r\n                    \"rgb(255, 99, 132)\",\r\n                  ],\r\n                  data: arrayVaccinated,\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: percentVaccinated + \" of Global Population Vaccinated (assuming double dose)\",\r\n                fontSize: 20,\r\n              },\r\n              legend: {\r\n                labels: {\r\n                  usePointStyle: true,\r\n                },\r\n                display: true,\r\n                position: \"right\",\r\n              },\r\n              tooltips: {\r\n                callbacks: {\r\n                  label: function (tooltipItem, data) {\r\n                    var dataLabel = data.labels[tooltipItem.index];\r\n                    var value =\r\n                      \": \" +\r\n                      data.datasets[tooltipItem.datasetIndex].data[\r\n                        tooltipItem.index\r\n                      ].toLocaleString();\r\n\r\n                    if (Chart.helpers.isArray(dataLabel)) {\r\n                      dataLabel = dataLabel.slice();\r\n                      dataLabel[0] += value;\r\n                    } else {\r\n                      dataLabel += value;\r\n                    }\r\n                    return dataLabel;\r\n                  },\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  worldVaccinePie2() {\r\n    var vaccineArray = [];\r\n    let vacn;\r\n    let vaccineNumber;\r\n\r\n    for (let i = 0; i < this.props.vaccineCountries.length; i++) {\r\n      vacn = Object.values(this.props.vaccineCountries[i][\"timeline\"]);\r\n      vaccineNumber = vacn[vacn.length - 1];\r\n      if (vaccineNumber > 0) {\r\n        vaccineArray[this.props.vaccineCountries[i].country] = vaccineNumber;\r\n      }\r\n    }\r\n\r\n    let labelVaccine = Object.keys(vaccineArray);\r\n    let arrayVaccinated = Object.values(vaccineArray);\r\n    return (\r\n      <Card style={{ marginBottom: \"10px\" }}>\r\n        <CardContent>\r\n          <Pie\r\n            data={{\r\n              labels: labelVaccine,\r\n              datasets: [\r\n                {\r\n                  label: \"Vaccinated\",\r\n                  backgroundColor: backGroundColorArray,\r\n                  hoverBackgroundColor: backGroundColorArray,\r\n                  data: arrayVaccinated,\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: \"Global Vaccines Administered\",\r\n                fontSize: 20,\r\n              },\r\n              legend: {\r\n                labels: {\r\n                  usePointStyle: true,\r\n                },\r\n                display: false,\r\n                position: \"right\",\r\n              },\r\n              tooltips: {\r\n                callbacks: {\r\n                  label: function (tooltipItem, data) {\r\n                    var dataLabel = data.labels[tooltipItem.index];\r\n                    var value =\r\n                      \": \" +\r\n                      data.datasets[tooltipItem.datasetIndex].data[\r\n                        tooltipItem.index\r\n                      ].toLocaleString();\r\n\r\n                    if (Chart.helpers.isArray(dataLabel)) {\r\n                      dataLabel = dataLabel.slice();\r\n                      dataLabel[0] += value;\r\n                    } else {\r\n                      dataLabel += value;\r\n                    }\r\n                    return dataLabel;\r\n                  },\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  worldVaccineChart() {\r\n    var date = Object.keys(this.props.vaccineGlobal);\r\n    var data1 = Object.values(this.props.vaccineGlobal);\r\n    var config = {\r\n      type: \"line\",\r\n      data: {\r\n        labels: date,\r\n        datasets: [\r\n          {\r\n            label: \"Vaccines Administered\",\r\n            backgroundColor: \"#00A6B4\",\r\n            borderColor: \"#00A6B4\",\r\n            data: data1,\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        aspectRatio: 2,\r\n        legend: {\r\n          labels: {\r\n            usePointStyle: true,\r\n          },\r\n          display: false,\r\n          position: \"bottom\",\r\n        },\r\n        responsive: true,\r\n        title: {\r\n          display: false,\r\n          text: \"Vaccines Administered\",\r\n          fontSize: 20,\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function (tooltipItem, data) {\r\n              var dataLabel = data.labels[tooltipItem.index];\r\n              var value =\r\n                \": \" +\r\n                data.datasets[tooltipItem.datasetIndex].data[\r\n                  tooltipItem.index\r\n                ].toLocaleString();\r\n\r\n              if (Chart.helpers.isArray(dataLabel)) {\r\n                dataLabel = dataLabel.slice();\r\n                dataLabel[0] += value;\r\n              } else {\r\n                dataLabel += value;\r\n              }\r\n              return dataLabel;\r\n            },\r\n          },\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              type: \"time\",\r\n              time: {\r\n                unit: \"day\",\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Time\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n                userCallback: function (value, index, values) {\r\n                  value = value.toString();\r\n                  value = value.split(/(?=(?:...)*$)/);\r\n                  value = value.join(\",\");\r\n                  return value;\r\n                },\r\n              },\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Vaccines Administered\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n    var ctx = document.getElementById(\"canvasVaccine\").getContext(\"2d\");\r\n    window.myLine = new Chart(ctx, config);\r\n\r\n    var colorNames = Object.keys(window.chartColors);\r\n  }\r\n\r\n  worldConfirmedChart() {\r\n    var date = Object.keys(this.props.historyGlobal.cases);\r\n    var data1 = Object.values(this.props.historyGlobal.cases);\r\n    var data2 = Object.values(this.props.historyGlobal.deaths);\r\n    var data3 = Object.values(this.props.historyGlobal.recovered);\r\n    var config = {\r\n      type: \"line\",\r\n      data: {\r\n        labels: date,\r\n        datasets: [\r\n          {\r\n            label: \"Cases\",\r\n            backgroundColor: \"rgb(54, 162, 235)\",\r\n            borderColor: \"rgb(54, 162, 235)\",\r\n            data: data1,\r\n            fill: false,\r\n          },\r\n          {\r\n            label: \"Deaths\",\r\n            backgroundColor: \"rgb(255, 99, 132)\",\r\n            borderColor: \"rgb(255, 99, 132)\",\r\n            data: data2,\r\n            fill: false,\r\n          },\r\n          {\r\n            label: \"Recovered\",\r\n            backgroundColor: \"rgb(75, 192, 192)\",\r\n            borderColor: \"rgb(75, 192, 192)\",\r\n            data: data3,\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        aspectRatio: 1.5,\r\n        legend: {\r\n          labels: {\r\n            usePointStyle: true,\r\n          },\r\n          display: true,\r\n          position: \"bottom\",\r\n        },\r\n        responsive: true,\r\n        title: {\r\n          display: true,\r\n          text: \"Cases\",\r\n          fontSize: 20,\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function (tooltipItem, data) {\r\n              var dataLabel = data.labels[tooltipItem.index];\r\n              var value =\r\n                \": \" +\r\n                data.datasets[tooltipItem.datasetIndex].data[\r\n                  tooltipItem.index\r\n                ].toLocaleString();\r\n\r\n              if (Chart.helpers.isArray(dataLabel)) {\r\n                dataLabel = dataLabel.slice();\r\n                dataLabel[0] += value;\r\n              } else {\r\n                dataLabel += value;\r\n              }\r\n              return dataLabel;\r\n            },\r\n          },\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              type: \"time\",\r\n              time: {\r\n                unit: \"day\",\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Time\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n                userCallback: function (value, index, values) {\r\n                  value = value.toString();\r\n                  value = value.split(/(?=(?:...)*$)/);\r\n                  value = value.join(\",\");\r\n                  return value;\r\n                },\r\n              },\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Cases\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n    var ctx = document.getElementById(\"canvasConfirmed\").getContext(\"2d\");\r\n    window.myLine = new Chart(ctx, config);\r\n\r\n    var colorNames = Object.keys(window.chartColors);\r\n  }\r\n\r\n  worldConfirmedLogChart() {\r\n    var date = Object.keys(this.props.historyGlobal.cases);\r\n    var data1 = Object.values(this.props.historyGlobal.cases);\r\n    var data2 = Object.values(this.props.historyGlobal.deaths);\r\n    var data3 = Object.values(this.props.historyGlobal.recovered);\r\n    var config = {\r\n      type: \"line\",\r\n      data: {\r\n        labels: date,\r\n        datasets: [\r\n          {\r\n            label: \"Cases\",\r\n            backgroundColor: \"rgb(54, 162, 235)\",\r\n            borderColor: \"rgb(54, 162, 235)\",\r\n            data: data1,\r\n            fill: false,\r\n          },\r\n          {\r\n            label: \"Deaths\",\r\n            backgroundColor: \"rgb(255, 99, 132)\",\r\n            borderColor: \"rgb(255, 99, 132)\",\r\n            data: data2,\r\n            fill: false,\r\n          },\r\n          {\r\n            label: \"Recovered\",\r\n            backgroundColor: \"rgb(75, 192, 192)\",\r\n            borderColor: \"rgb(75, 192, 192)\",\r\n            data: data3,\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        legend: {\r\n          labels: {\r\n            usePointStyle: true,\r\n          },\r\n          display: true,\r\n          position: \"bottom\",\r\n        },\r\n        responsive: true,\r\n        aspectRatio: 1.5,\r\n        title: {\r\n          display: true,\r\n          text: \"Cases (Log)\",\r\n          fontSize: 20,\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function (tooltipItem, data) {\r\n              var dataLabel = data.labels[tooltipItem.index];\r\n              var value =\r\n                \": \" +\r\n                data.datasets[tooltipItem.datasetIndex].data[\r\n                  tooltipItem.index\r\n                ].toLocaleString();\r\n\r\n              if (Chart.helpers.isArray(dataLabel)) {\r\n                dataLabel = dataLabel.slice();\r\n                dataLabel[0] += value;\r\n              } else {\r\n                dataLabel += value;\r\n              }\r\n              return dataLabel;\r\n            },\r\n          },\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              type: \"time\",\r\n              time: {\r\n                unit: \"day\",\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Time\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              type: \"logarithmic\",\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Cases\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n    var ctx = document.getElementById(\"canvasConfirmedLog\").getContext(\"2d\");\r\n    window.myLine = new Chart(ctx, config);\r\n\r\n    var colorNames = Object.keys(window.chartColors);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 class=\"display-4 text-center\" id=\"title-text\">\r\n          Global Covid-19\r\n        </h1>\r\n        <hr />\r\n        <div className=\"GlobalGraphs container-fluid\">\r\n          <MediaCard data={this.props.cases} />\r\n          <hr />\r\n          <div className=\"row\">\r\n            <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n              <Card style={{ marginBottom: \"10px\" }}>\r\n                <CardContent>\r\n                  <canvas aspectRatio=\"1\" id=\"canvasConfirmed\"></canvas>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n            <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n              <Card style={{ marginBottom: \"10px\" }}>\r\n                <CardContent>\r\n                  <canvas id=\"canvasConfirmedLog\"></canvas>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n\r\n          <ContinentCards casesContinents={this.props.casesContinents} />\r\n          <ContinentCharts casesContinents={this.props.casesContinents} />\r\n\r\n          <h1\r\n            class=\"display-4 text-center\"\r\n            id=\"vaccine-text\"\r\n            style={{ fontSize: \"3rem\", margin: 25 }}\r\n          >\r\n            Global COVID-19 Vaccines\r\n          </h1>\r\n          <hr />\r\n          <div className=\"row\">\r\n            <div className=\"col-xs-10 offset-xs-1 col-lg-6 offset-lg-3\">\r\n              <Card style={{ marginBottom: \"10px\" }}>\r\n                <CardContent>\r\n                  <canvas id=\"canvasVaccine\"></canvas>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-xs-10 offset-xs-1 col-md-6\">\r\n              {this.worldVaccinePie2()}\r\n            </div>\r\n            <div className=\"col-xs-10 offset-xs-1 col-md-6\">\r\n              {this.worldVaccinePie()}\r\n            </div>\r\n          </div>\r\n          <hr />\r\n\r\n          <TopCountryCard\r\n            casesCountries={this.props.casesCountries}\r\n            cases={this.props.cases}\r\n          />\r\n          <EnhancedTable\r\n            casesCountries={this.props.casesCountries}\r\n            vaccineCountries={this.props.vaccineCountries}\r\n          />\r\n          <Footer cases={this.props.cases} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalGraphs;\r\n","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\SearchPage.js",["100","101"],"import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Footer from './Footer';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  option: {\r\n    fontSize: 15,\r\n    '& > span': {\r\n      fontSize: 18,\r\n    },\r\n  },\r\n});\r\nfunction countryLink(country){\r\n  const words = country.split(\" \");\r\n  for (let i = 0; i < words.length; i++) {\r\n      words[i] = words[i][0].toUpperCase() + words[i].substr(1);\r\n  }\r\n  let countryLink = words.join(\"%20\");\r\n  return countryLink\r\n}\r\n\r\nfunction handleChange (object, value) {\r\nconsole.log(value.name);\r\nwindow.location.pathname='/country/'+countryLink(value.name)\r\n}\r\n\r\n\r\nexport default function CountrySelect({countryList, cases}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className=\"container-fluid text-center\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <h1 class=\"display-4\" id=\"title-text\">\r\n            Search\r\n      </h1>\r\n\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <div className=\"row\">\r\n        <div style={{ marginTop: 20 }} className=\"col-10 offset-1 col-md-6 offset-md-3\">\r\n          \r\n          <Autocomplete\r\n            onChange= {handleChange}\r\n            id=\"combo-box-demo\"\r\n            options={countryList}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: \"100%\" }}\r\n            renderInput={(params) => <TextField {...params} label=\"Choose a country\" variant=\"outlined\" />}\r\n          />\r\n\r\n        </div>\r\n      </div>\r\n      <Footer cases = {cases}/>\r\n    </div>\r\n\r\n  );\r\n}","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\utils.js",["102"],"'use strict';\n\nwindow.chartColors = {\n\tred: 'rgb(255, 99, 132)',\n\torange: 'rgb(255, 159, 64)',\n\tyellow: 'rgb(255, 205, 86)',\n\tgreen: 'rgb(75, 192, 192)',\n\tblue: 'rgb(54, 162, 235)',\n\tpurple: 'rgb(153, 102, 255)',\n\tgrey: 'rgb(201, 203, 207)'\n};\n\n(function(global) {\n\tvar MONTHS = [\n\t\t'January',\n\t\t'February',\n\t\t'March',\n\t\t'April',\n\t\t'May',\n\t\t'June',\n\t\t'July',\n\t\t'August',\n\t\t'September',\n\t\t'October',\n\t\t'November',\n\t\t'December'\n\t];\n\n\tvar COLORS = [\n\t\t'#4dc9f6',\n\t\t'#f67019',\n\t\t'#f53794',\n\t\t'#537bc4',\n\t\t'#acc236',\n\t\t'#166a8f',\n\t\t'#00a950',\n\t\t'#58595b',\n\t\t'#8549ba'\n\t];\n\n\tvar Samples = global.Samples || (global.Samples = {});\n\tvar Color = global.Color;\n\n\tSamples.utils = {\n\t\t// Adapted from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n\t\tsrand: function(seed) {\n\t\t\tthis._seed = seed;\n\t\t},\n\n\t\trand: function(min, max) {\n\t\t\tvar seed = this._seed;\n\t\t\tmin = min === undefined ? 0 : min;\n\t\t\tmax = max === undefined ? 1 : max;\n\t\t\tthis._seed = (seed * 9301 + 49297) % 233280;\n\t\t\treturn min + (this._seed / 233280) * (max - min);\n\t\t},\n\n\t\tnumbers: function(config) {\n\t\t\tvar cfg = config || {};\n\t\t\tvar min = cfg.min || 0;\n\t\t\tvar max = cfg.max || 1;\n\t\t\tvar from = cfg.from || [];\n\t\t\tvar count = cfg.count || 8;\n\t\t\tvar decimals = cfg.decimals || 8;\n\t\t\tvar continuity = cfg.continuity || 1;\n\t\t\tvar dfactor = Math.pow(10, decimals) || 0;\n\t\t\tvar data = [];\n\t\t\tvar i, value;\n\n\t\t\tfor (i = 0; i < count; ++i) {\n\t\t\t\tvalue = (from[i] || 0) + this.rand(min, max);\n\t\t\t\tif (this.rand() <= continuity) {\n\t\t\t\t\tdata.push(Math.round(dfactor * value) / dfactor);\n\t\t\t\t} else {\n\t\t\t\t\tdata.push(null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\n\t\tlabels: function(config) {\n\t\t\tvar cfg = config || {};\n\t\t\tvar min = cfg.min || 0;\n\t\t\tvar max = cfg.max || 100;\n\t\t\tvar count = cfg.count || 8;\n\t\t\tvar step = (max - min) / count;\n\t\t\tvar decimals = cfg.decimals || 8;\n\t\t\tvar dfactor = Math.pow(10, decimals) || 0;\n\t\t\tvar prefix = cfg.prefix || '';\n\t\t\tvar values = [];\n\t\t\tvar i;\n\n\t\t\tfor (i = min; i < max; i += step) {\n\t\t\t\tvalues.push(prefix + Math.round(dfactor * i) / dfactor);\n\t\t\t}\n\n\t\t\treturn values;\n\t\t},\n\n\t\tmonths: function(config) {\n\t\t\tvar cfg = config || {};\n\t\t\tvar count = cfg.count || 12;\n\t\t\tvar section = cfg.section;\n\t\t\tvar values = [];\n\t\t\tvar i, value;\n\n\t\t\tfor (i = 0; i < count; ++i) {\n\t\t\t\tvalue = MONTHS[Math.ceil(i) % 12];\n\t\t\t\tvalues.push(value.substring(0, section));\n\t\t\t}\n\n\t\t\treturn values;\n\t\t},\n\n\t\tcolor: function(index) {\n\t\t\treturn COLORS[index % COLORS.length];\n\t\t},\n\n\t\ttransparentize: function(color, opacity) {\n\t\t\tvar alpha = opacity === undefined ? 0.5 : 1 - opacity;\n\t\t\treturn Color(color).alpha(alpha).rgbString();\n\t\t}\n\t};\n\n\t// DEPRECATED\n\twindow.randomScalingFactor = function() {\n\t\treturn Math.round(Samples.utils.rand(-100, 100));\n\t};\n\n\t// INITIALIZATION\n\n\tSamples.utils.srand(Date.now());\n\n\t// Google Analytics\n\t/* eslint-disable */\n\tif (document.location.hostname.match(/^(www\\.)?chartjs\\.org$/)) {\n\t\t(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\t\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n\t\t})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\t\tga('create', 'UA-28909194-3', 'auto');\n\t\tga('send', 'pageview');\n\t}\n\t/* eslint-enable */\n\n}(this));\n","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\ComparePage.js",["103","104","105"],"import React, {useState} from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CompareGraphs from './CompareGraphs';\r\nimport CompareTable from './CompareTable';\r\nimport axios from 'axios';\r\nimport Footer from './Footer';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nexport default function ComparePage({countryList, casesCountries, vaccineCountries, cases}) {\r\n\r\n let historyCountries;\r\n\r\n  const [count, setCount] = useState(0);\r\n  const [compareTableData, setcompareTableData] = useState([]);\r\n  const [compareGraphsData, setcompareGraphsData] = useState([]);\r\n\r\n  function handleChange (object, value) {\r\n    if (value.length > 0){\r\n    let XCountries = value[0].name;\r\n    console.log(XCountries);\r\n    if (value.length > 1){\r\n    for (let i = 1; i < value.length; i++){\r\n      XCountries = XCountries + \"%2C\" + value[i].name\r\n    }}\r\n    let countryURL = \"https://disease.sh/v3/covid-19/historical/\" + XCountries + \"?lastdays=all\";\r\n\r\n    axios.all([axios.get(countryURL)]).then(\r\n      axios.spread((req1) => {\r\n        setcompareGraphsData(req1.data);\r\n      })\r\n    );}\r\n    else {setcompareGraphsData([])}\r\n    console.log(compareGraphsData);\r\n    getComparisonData(value)\r\n}\r\n\r\nfunction getComparisonData(value){\r\n  console.log(value);\r\n  setcompareTableData([]);\r\n  setcompareGraphsData([]);\r\n  for (let i = 0; i < value.length; i++){\r\n    for (let j = 0; j < casesCountries.length; j++){\r\n      if (casesCountries[j].country == value[i].name){\r\n        setcompareTableData(arr => [...arr,(casesCountries[j])]);  \r\n      }\r\n    }\r\n  }\r\n  setCount(value.length)\r\n  \r\n}\r\n  return (\r\n    <div className=\"container-fluid\">\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <h1 class=\"display-4 text-center\" id=\"title-text\">\r\n          Compare\r\n    </h1>\r\n      </div>\r\n    </div>\r\n    <hr />\r\n    <div className=\"row\">\r\n        <div style={{ marginTop: 20 }} className=\"col-10 offset-1 col-md-6 offset-md-3\">\r\n          \r\n    <Autocomplete\r\n      multiple\r\n      id=\"checkboxes-tags-demo\"\r\n      options={countryList}\r\n      getOptionLabel={(option) => option.name}\r\n      disableCloseOnSelect\r\n      onChange= {handleChange}\r\n      style={{ width: \"100%\" }}\r\n      renderOption={(option, { selected }) => (\r\n        <React.Fragment>\r\n          <Checkbox\r\n            icon={icon}\r\n            checkedIcon={checkedIcon}\r\n            style={{ marginRight: 8 }}\r\n            checked={selected}\r\n          />\r\n          {option.name}\r\n        </React.Fragment>\r\n      )}\r\n      renderInput={(params) => (\r\n        <TextField {...params} variant=\"outlined\" label=\"Choose two or more countries\" />\r\n      )}\r\n    />\r\n    </div>\r\n    </div>\r\n    {compareGraphsData.length > 0?\r\n    <div>\r\n      <hr/>\r\n    <CompareGraphs compareGraphsData = {compareGraphsData}/>\r\n    <CompareTable \r\n    casesCountries = {compareTableData} vaccineCountries = {vaccineCountries}/>\r\n    </div>\r\n    :null}\r\n    <Footer cases = {cases}/>\r\n    </div>\r\n  );\r\n}","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\CountryPage.js",["106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\ContinentCharts.js",[],"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\GlobalCards.js",["122"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // maxWidth: 800,\r\n    marginBottom: \"10px\"},\r\n  media: {\r\n    height: 0,\r\n  },\r\n});\r\nexport default function MediaCard({data}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <div className = \"row\">\r\n      <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{borderTop: \"rgb(54, 162, 235) 5px solid\"}}>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            Total Confirmed Cases\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{display: \"inline\"}}>\r\n            {data.cases.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" color= \"secondary\" style={{display: \"inline\", marginLeft: 10}}>\r\n          +{data.todayCases.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {((data.cases)/(data.population)).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})} of Global Population\r\n          </Typography>\r\n        </CardContent>\r\n    </Card>\r\n    </div>\r\n\r\n    <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{borderTop: \"rgb(255, 205, 86) 5px solid\"}}>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            Total Active Cases\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{display: \"inline\"}}>\r\n            {data.active.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" style={{color: ((data.todayCases - data.todayRecovered)<0?\"green\":\"red\"), display: \"inline\", marginLeft: 10}}>\r\n          {(data.todayCases - data.todayRecovered)<0?\"\":\"+\"}{(data.todayCases - data.todayRecovered).toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {(data.critical.toLocaleString())} Remain in Critical Condition\r\n          </Typography>\r\n        </CardContent>\r\n    </Card>\r\n    </div>\r\n\r\n    <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{borderTop: \"rgb(75, 192, 192) 5px solid\"}}>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Covid-19\"\r\n        />\r\n        <CardContent>\r\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            Total Recovered\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{display: \"inline\"}}>\r\n            {data.recovered.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{color: \"green\", display: \"inline\", marginLeft: 10}}>\r\n          +{data.todayRecovered.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {((data.recovered)/(data.cases)).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})} of Confirmed Cases\r\n          </Typography>\r\n        </CardContent>\r\n    </Card>\r\n    </div>\r\n    <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{borderTop: \"rgb(255, 99, 132) 5px solid\"}}>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            Total Deaths\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{display: \"inline\"}}>\r\n            {data.deaths.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" color=\"secondary\" style={{display: \"inline\", marginLeft: 10}}>\r\n          +{data.todayDeaths.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {((data.deaths)/(data.cases)).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})} of Confirmed Cases\r\n          </Typography>\r\n        </CardContent>\r\n    </Card>\r\n    </div>\r\n    </div>\r\n    </div>\r\n  \r\n  );\r\n}\r\n","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\ContinentCards.js",["123"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // maxWidth: 800,\r\n    marginBottom: \"10px\"},\r\n  media: {\r\n    height: 5,\r\n  },\r\n});\r\n\r\n\r\nlet labelContinents = [];\r\nlet casesContinents = [];\r\nlet casesPerCapContinents = [];\r\nlet deathsContinents = [];\r\nlet deathsPerCapContinents = [];\r\nlet fatalityRateContinents = [];\r\nlet continentCards = [];\r\n\r\nlet cardColor= [\r\n  'rgb(255, 99, 132)',\r\n  'rgb(255, 159, 64)',\r\n  'rgb(255, 205, 86)',\r\n  'rgb(75, 192, 192)',\r\n  'rgb(54, 162, 235)',\r\n  'rgb(153, 102, 255)'\r\n]\r\n\r\nclass ContinentCards extends React.Component {\r\n \r\n\r\n\r\n  testRun() {\r\n\r\n    for (let i = 0; i < (this.props.casesContinents).length; i++) {\r\n      labelContinents.push(this.props.casesContinents[i][\"continent\"]);\r\n      casesContinents.push(this.props.casesContinents[i][\"cases\"]);\r\n      deathsContinents.push(this.props.casesContinents[i][\"deaths\"]);\r\n      casesPerCapContinents.push(this.props.casesContinents[i][\"casesPerOneMillion\"]);\r\n      deathsPerCapContinents.push(this.props.casesContinents[i][\"deathsPerOneMillion\"]);\r\n      fatalityRateContinents.push((this.props.casesContinents[i][\"deaths\"])/(this.props.casesContinents[i][\"cases\"]));\r\n      this.createCards();\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.testRun();\r\n  };\r\n\r\n  createCards() {\r\n    const { classes } = this.props;\r\n    for (let i = 0; i < labelContinents.length; i++) {\r\n      continentCards[i] = (\r\n        <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{marginBottom: 10, borderTop: cardColor[i] + \" 5px solid\"}}>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            {labelContinents[i]}\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\" style = {{marginBottom: 0}}>\r\n            {casesContinents[i].toLocaleString()} cases\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" color = \"textSecondary\" style={{marginTop: 0, fontSize: \"0.8rem\", fontStyle: \"italic\"}}>\r\n          {casesPerCapContinents[i].toLocaleString()} cases per million\r\n          </Typography>\r\n          <Typography variant=\"h6\" component=\"h2\" color = \"secondary\" style={{marginBottom: 0}}>\r\n          {deathsContinents[i].toLocaleString()} deaths\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" color = \"textSecondary\" style={{marginTop: 0, fontSize: \"0.8rem\", fontStyle: \"italic\"}}>\r\n          {deathsPerCapContinents[i].toLocaleString()} deaths per million\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {(fatalityRateContinents[i].toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}))} Fatality Rate\r\n          </Typography>\r\n        </CardContent>\r\n    </Card>\r\n    </div>\r\n\r\n      )\r\n    }\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n\r\n    if (labelContinents.length === 0) {\r\n      return (\r\n        <div class=\"text-center\">\r\n          <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n            <span className=\"visually-hidden\"></span>\r\n          </div>\r\n          <h3 id=\"loading-text\">Loading...</h3>\r\n        </div>\r\n      )\r\n    }\r\n    for (let i = 0; i < labelContinents.length; i++) {\r\n      return (\r\n        <div> \r\n          <h1 class=\"display-4 text-center\" id = \"continent-text\" style = {{fontSize: \"3rem\", margin: 25}}>Covid-19 by Continent</h1>\r\n          <hr/>\r\n        <div className = \"row\">\r\n          {continentCards} \r\n    </div>\r\n    <hr/>\r\n    </div>\r\n\r\n      )\r\n    }}}\r\n    export default withStyles(useStyles)(ContinentCards);","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\GlobalTable.js",[],"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\TopCountryCard.js",["124","125","126","127","128","129"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // maxWidth: 800,\r\n    marginBottom: \"10px\"},\r\n  media: {\r\n    height: 5,\r\n  },\r\n});\r\n\r\n\r\nlet labelCountry = [];\r\nlet casesCountry = [];\r\nlet todayCases = [];\r\nlet casesPercentagePop = [];\r\nlet percentWorldCases = [];\r\nlet fatalityRateCountry = [];\r\nlet countryCards = [];\r\n\r\n\r\nclass TopCountryCard extends React.Component {\r\n \r\n\r\n\r\n  testRun() {\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      labelCountry.push(this.props.casesCountries[i][\"country\"]);\r\n      casesCountry.push(this.props.casesCountries[i][\"cases\"]);\r\n      casesPercentagePop.push((this.props.casesCountries[i][\"cases\"])/(this.props.casesCountries[i][\"population\"]));\r\n      todayCases.push(this.props.casesCountries[i][\"todayCases\"]);  \r\n      percentWorldCases.push((this.props.casesCountries[i][\"cases\"])/(this.props.cases[\"cases\"]));\r\n      fatalityRateCountry.push((this.props.casesCountries[i][\"deaths\"])/(this.props.casesCountries[i][\"cases\"]));\r\n      this.createCards();\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.testRun();\r\n  };\r\n\r\n  createCards() {\r\n    const { classes } = this.props;\r\n    for (let i = 0; i < labelCountry.length; i++) {\r\n      countryCards[i] = (\r\n        <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{marginBottom: 10, borderTop: \"rgb(255, 99, 132) 5px solid\"}}>\r\n      <CardActionArea>\r\n        <Link style = {{textDecoration:\"none\", color:\"black\"}}to={\"/country/\"+labelCountry[i]}>\r\n        <CardMedia\r\n          className={classes.media}\r\n        />\r\n\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            {labelCountry[i]}\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\" style = {{display: \"inline\", marginBottom: 0}}>\r\n            {casesCountry[i].toLocaleString()} cases\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" color = \"textSecondary\" style={{display: \"inline\", marginTop: 0, marginLeft:5, fontSize: \"0.8rem\"}}>\r\n          {todayCases[i]? \"+\" : null}{todayCases[i]? todayCases[i].toLocaleString():null}\r\n          </Typography>\r\n          <Typography variant=\"h6\" component=\"h3\" style={{fontWeight:\"bold\", marginBottom: 5, fontSize: \"1rem\"}}>\r\n          {percentWorldCases[i].toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})} of total world cases\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" color = \"textSecondary\" style={{marginTop: 0, fontSize: \"0.8rem\"}}>\r\n          {casesPercentagePop[i].toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})} of country infected\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" color = \"textSecondary\" style={{marginTop: 0, fontSize: \"0.8rem\"}}>\r\n            {(fatalityRateCountry[i].toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}))} fatality rate\r\n          </Typography>\r\n        </CardContent>\r\n        </Link>\r\n      </CardActionArea>\r\n    </Card>\r\n    </div>\r\n\r\n      )\r\n    }\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n\r\n    if (labelCountry.length == 0) {\r\n      return (\r\n        <div class=\"text-center\">\r\n          <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n            <span className=\"visually-hidden\"></span>\r\n          </div>\r\n          <h3 id=\"loading-text\">Loading...</h3>\r\n        </div>\r\n      )\r\n    }\r\n    for (let i = 0; i < labelCountry.length; i++) {\r\n      return (\r\n        <div> \r\n          <h1 class=\"display-4 text-center\" id = \"country-text\" style = {{fontSize: \"3rem\", margin: 25}}>\r\n            Most Affected Countries\r\n            </h1>\r\n          <hr/>\r\n        <div className = \"row\">\r\n          {countryCards}\r\n    </div>\r\n    <hr/>\r\n    </div>\r\n\r\n      )\r\n    }}}\r\n    export default withStyles(useStyles)(TopCountryCard);","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\CompareGraphs.js",["130","131","132"],"import React, { useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Chart from \"chart.js\";\r\nimport \"./utils\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default function CompareGraphs({ compareGraphsData }) {\r\n    console.log(compareGraphsData);\r\n    useEffect(() => {\r\n        compareCountryData();\r\n        // return () => console.log(\"cleanup\");\r\n    });\r\n\r\n    let colourThemeArray = [\r\n        'rgb(255, 99, 132)',\r\n        'rgb(255, 159, 64)',\r\n        'rgb(255, 205, 86)',\r\n        'rgb(75, 192, 192)',\r\n        'rgb(54, 162, 235)',\r\n        'rgb(153, 102, 255)',\r\n        'rgb(201, 203, 207)',\r\n        '#4dc9f6',\r\n        '#f67019',\r\n        '#f53794',\r\n        '#537bc4',\r\n        '#acc236',\r\n        '#166a8f',\r\n        '#00a950',\r\n        '#58595b',\r\n        '#8549ba'\r\n    ];\r\n    let compareCasesData = [];\r\n    let compareDeathsData = [];\r\n    let date = [];\r\n\r\n    function compareCharts(data, title, canvasid, yaxis) {\r\n        var config = {\r\n            type: \"line\",\r\n            data: {\r\n                labels: date,\r\n                datasets: data,\r\n            },\r\n            options: {\r\n                aspectRatio: 1.7,\r\n                legend: {\r\n                    labels: {\r\n                        usePointStyle: true\r\n                    },\r\n                    display: true,\r\n                    position: \"bottom\",\r\n                },\r\n                responsive: true,\r\n                title: {\r\n                    display: true,\r\n                    text: title,\r\n                    fontSize: 20,\r\n                },\r\n                tooltips: {\r\n                    mode: \"index\",\r\n                    intersect: false,\r\n                    callbacks: {\r\n                        label: function (tooltipItem, data) {\r\n                            var dataLabel = data.labels[tooltipItem.index];\r\n                            var value =\r\n                                \": \" +\r\n                                data.datasets[tooltipItem.datasetIndex].data[\r\n                                    tooltipItem.index\r\n                                ].toLocaleString();\r\n\r\n                            if (Chart.helpers.isArray(dataLabel)) {\r\n                                dataLabel = dataLabel.slice();\r\n                                dataLabel[0] += value;\r\n                            } else {\r\n                                dataLabel += value;\r\n                            }\r\n                            return dataLabel;\r\n                        },\r\n                    },\r\n                },\r\n                hover: {\r\n                    mode: \"nearest\",\r\n                    intersect: true,\r\n                },\r\n                scales: {\r\n                    xAxes: [\r\n                        {\r\n                            gridLines: {\r\n                                display: true,\r\n                                drawBorder: true,\r\n                                drawOnChartArea: false,\r\n                            },\r\n                            display: true,\r\n                            type: \"time\",\r\n                            time: {\r\n                                unit: \"day\",\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Time\",\r\n                            },\r\n                        },\r\n                    ],\r\n                    yAxes: [\r\n                        {\r\n                            type: yaxis,\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                                userCallback: function (value, index, values) {\r\n                                    value = value.toString();\r\n                                    value = value.split(/(?=(?:...)*$)/);\r\n                                    value = value.join(\",\");\r\n                                    return value;\r\n                                },\r\n                            },\r\n                            gridLines: {\r\n                                display: true,\r\n                                drawBorder: true,\r\n                                drawOnChartArea: false,\r\n                            },\r\n                            display: true,\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: title\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n            },\r\n        };\r\n        var ctx = document.getElementById(canvasid).getContext(\"2d\");\r\n        window.myLine = new Chart(ctx, config);\r\n\r\n        var colorNames = Object.keys(window.chartColors);\r\n    }\r\n\r\n    function compareCountryData() {\r\n            date = Object.keys(compareGraphsData[0].timeline.cases)\r\n            for (let i = 0; i < compareGraphsData.length; i++) {\r\n                compareCasesData.push({\r\n                    label: compareGraphsData[i].country,\r\n                    backgroundColor: colourThemeArray[i],\r\n                    borderColor: colourThemeArray[i],\r\n                    data: Object.values(compareGraphsData[i].timeline.cases),\r\n                    fill: false,\r\n                });\r\n                compareDeathsData.push({\r\n                    label: compareGraphsData[i].country,\r\n                    backgroundColor: colourThemeArray[i],\r\n                    borderColor: colourThemeArray[i],\r\n                    data: Object.values(compareGraphsData[i].timeline.deaths),\r\n                    fill: false,\r\n                });\r\n            }\r\n            compareCharts(compareCasesData, \"Cases\", \"canvasCompareCases\", \"linear\");\r\n            compareCharts(compareCasesData, \"Cases (Log)\", \"canvasCompareCasesLog\", \"logarithmic\");\r\n            compareCharts(compareDeathsData, \"Deaths\", \"canvasCompareDeaths\", \"linear\");\r\n            compareCharts(compareDeathsData, \"Deaths (Log)\", \"canvasCompareDeathsLog\", \"logarithmic\");\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {compareGraphsData.length > 0 ? (\r\n                <div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-xs-12 col-lg-6\">\r\n                            <Card style={{ marginBottom: \"10px\" }}>\r\n                                <CardContent>\r\n                                    <canvas id=\"canvasCompareCases\"></canvas>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-xs-12 col-lg-6\">\r\n                            <Card style={{ marginBottom: \"10px\" }}>\r\n                                <CardContent>\r\n                                    <canvas id=\"canvasCompareCasesLog\"></canvas>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n                            <Card style={{ marginBottom: \"10px\" }}>\r\n                                <CardContent>\r\n                                    <canvas id=\"canvasCompareDeaths\"></canvas>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n                            <Card style={{ marginBottom: \"10px\" }}>\r\n                                <CardContent>\r\n                                    <canvas id=\"canvasCompareDeathsLog\"></canvas>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}   \r\n","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\CompareTable.js",["133","134","135","136","137","138","139","140","141","142"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\n\r\nvar headCells = [\r\n  { id: \"country\", label: \"Country\" },\r\n  {\r\n    id: \"cases\",\r\n    label: \"Cases\",\r\n    align: \"left\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"casesToday\",\r\n    label: \"Cases Today\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"casesPerOneMillion\",\r\n    label: \"Cases Per One Million\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"deaths\",\r\n    label: \"Deaths\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"deathsToday\",\r\n    label: \"Deaths Today\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"deathsPerOneMillion\",\r\n    label: \"Deaths Per One Million\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"tests\",\r\n    label: \"Tests\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"testsPerOneMillion\",\r\n    label: \"Tests Per One Million\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"population\",\r\n    label: \"Population\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"vaccinesAdministered\",\r\n    label: \"Vaccines Administered\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"percentVaccinated\",\r\n    label: \"Population Vaccinated (assuming double dose)\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}) : null),\r\n  },\r\n];\r\n\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {/* <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell> */}\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.id == \"country\" ? 'left' : 'right'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n          Covid-19 Data by Country\r\n        </Typography>\r\n      )}\r\n\r\n      {/* {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )} */}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function CompareTable({casesCountries, vaccineCountries}) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('calories');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  var vaccineArray = [];\r\n  let vac;\r\n  let vaccineNumber;\r\n\r\n  for (let i = 0; i < vaccineCountries.length; i++) {\r\n    vac = Object.values(vaccineCountries[i][\"timeline\"]);\r\n    vaccineNumber = vac[vac.length - 1];\r\n    vaccineArray[vaccineCountries[i].country] = vaccineNumber;\r\n  }\r\n\r\n  var rows = [];\r\n\r\n  for (let i = 0; i < casesCountries.length; i++) {\r\n    let vaccineNumber = 0;\r\n    if (casesCountries[i][\"country\"] in vaccineArray) {\r\n      vaccineNumber = vaccineArray[casesCountries[i][\"country\"]];\r\n    };\r\n    rows.push({\r\n      country: casesCountries[i][\"country\"],\r\n      cases: casesCountries[i][\"cases\"],\r\n      casesToday: casesCountries[i][\"todayCases\"],\r\n      casesPerOneMillion: casesCountries[i][\"casesPerOneMillion\"],\r\n      deaths: casesCountries[i][\"deaths\"],\r\n      deathsToday: casesCountries[i][\"todayDeaths\"],\r\n      deathsPerOneMillion: casesCountries[i][\"deathsPerOneMillion\"],\r\n      tests: casesCountries[i][\"tests\"],\r\n      testsPerOneMillion: casesCountries[i][\"testsPerOneMillion\"],\r\n      population: casesCountries[i][\"population\"],\r\n      vaccinesAdministered: vaccineNumber,\r\n      percentVaccinated: (vaccineNumber/casesCountries[i][\"population\"])/2\r\n    });\r\n  }\r\n\r\n\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.name);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.name)}\r\n                      // role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      {/* <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                        </TableCell> */}\r\n\r\n{headCells.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      \r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\CountryVaccinePie.js",["143","144","145"],"import \"./index.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Chart from \"chart.js\";\r\nimport { Pie} from 'react-chartjs-2';\r\nimport \"./utils\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\n\r\n function CountryVaccinePie({XVaccineCountries, XCountry, XStats}) {\r\nconsole.log(XVaccineCountries);\r\n    if (XVaccineCountries == null){\r\n        return (\r\n            <div class=\"text-center\">\r\n\r\n                <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n                    <span className=\"visually-hidden\"></span>\r\n                </div>\r\n                <h3 id=\"loading-text\">Loading...</h3>\r\n            </div>\r\n        )\r\n    }\r\n      let labelVaccine = [\"Vaccinated\", \"Not Vaccinated\"];\r\n\r\n      let vac;\r\n      let totalVaccinated;\r\n\r\n      for (let i = 0; i < XVaccineCountries.length; i++) {\r\n        if (XVaccineCountries[i][\"country\"] == XCountry){\r\n          vac = Object.values(XVaccineCountries[i][\"timeline\"]);\r\n          totalVaccinated = vac[vac.length - 1]/2;\r\n        }\r\n              }\r\n\r\n      let totalUnVaccinated = (XStats.population - totalVaccinated);\r\n      let arrayVaccinated = [totalVaccinated, totalUnVaccinated];\r\n      let percentVaccinated = (totalVaccinated/XStats.population).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})\r\n\r\n      return (\r\n        <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n  \r\n          <Card style = {{marginBottom: \"10px\"}}><CardContent>\r\n          <Pie\r\n            data={{\r\n              labels: labelVaccine,\r\n              datasets: [\r\n                {\r\n                  label: 'Vaccinated',\r\n                  backgroundColor: [\r\n                      'rgb(54, 162, 235)',\r\n                      'rgb(255, 99, 132)'\r\n                  ],\r\n                  hoverBackgroundColor: [\r\n                    'rgb(54, 162, 235)',\r\n                    'rgb(255, 99, 132)'\r\n                  ],\r\n                  data: arrayVaccinated\r\n                }\r\n              ]\r\n            }}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: percentVaccinated + \" of Population Vaccinated (assuming double dose)\",\r\n                fontSize: 20\r\n              },\r\n              legend: {\r\n                labels: {\r\n                  usePointStyle: true\r\n              },\r\n                display: true,\r\n                position: 'right'\r\n              },\r\n              tooltips: {\r\n                callbacks: {\r\n                  label: function(tooltipItem, data) {\r\n                    var dataLabel = data.labels[tooltipItem.index];\r\n                    var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();\r\n          \r\n                    if (Chart.helpers.isArray(dataLabel)) {\r\n                      dataLabel = dataLabel.slice();\r\n                      dataLabel[0] += value;\r\n                    } else {\r\n                      dataLabel += value;\r\n                    }\r\n                    return dataLabel;\r\n                  }\r\n                }\r\n            }\r\n             }}\r\n          />\r\n          </CardContent></Card>\r\n          \r\n        </div>\r\n      )\r\n            }\r\n            export default CountryVaccinePie","C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\Footer.js",[],"C:\\Users\\olive\\covid19\\covid19-dashboard\\src\\MUIGlobalTable.js",["146","147","148","149","150","151","152","153","154","155"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\n\r\nvar headCells = [\r\n  { id: \"country\", label: \"Country\" },\r\n  {\r\n    id: \"cases\",\r\n    label: \"Cases\",\r\n    align: \"left\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"casesToday\",\r\n    label: \"Cases Today\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"casesPerOneMillion\",\r\n    label: \"Cases Per One Million\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"deaths\",\r\n    label: \"Deaths\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"deathsToday\",\r\n    label: \"Deaths Today\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"deathsPerOneMillion\",\r\n    label: \"Deaths Per One Million\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"tests\",\r\n    label: \"Tests\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"testsPerOneMillion\",\r\n    label: \"Tests Per One Million\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"population\",\r\n    label: \"Population\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"vaccinesAdministered\",\r\n    label: \"Vaccines Administered\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString() : null),\r\n  },\r\n  {\r\n    id: \"percentVaccinated\",\r\n    label: \"Population Vaccinated (assuming double dose)\",\r\n    align: \"right\",\r\n    format: (value) => (value ? value.toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}) : null),\r\n  },\r\n];\r\n\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {/* <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell> */}\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.id == \"country\" ? 'left' : 'right'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n          Covid-19 Data by Country\r\n        </Typography>\r\n      )}\r\n\r\n      {/* {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )} */}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({casesCountries, vaccineCountries}) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('calories');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  var vaccineArray = [];\r\n  let vac;\r\n  let vaccineNumber;\r\n\r\n  for (let i = 0; i < vaccineCountries.length; i++) {\r\n    vac = Object.values(vaccineCountries[i][\"timeline\"]);\r\n    vaccineNumber = vac[vac.length - 1];\r\n    vaccineArray[vaccineCountries[i].country] = vaccineNumber;\r\n  }\r\n\r\n  var rows = [];\r\n\r\n  for (let i = 0; i < casesCountries.length; i++) {\r\n    let vaccineNumber = 0;\r\n    if (casesCountries[i][\"country\"] in vaccineArray) {\r\n      vaccineNumber = vaccineArray[casesCountries[i][\"country\"]];\r\n    };\r\n    rows.push({\r\n      country: casesCountries[i][\"country\"],\r\n      cases: casesCountries[i][\"cases\"],\r\n      casesToday: casesCountries[i][\"todayCases\"],\r\n      casesPerOneMillion: casesCountries[i][\"casesPerOneMillion\"],\r\n      deaths: casesCountries[i][\"deaths\"],\r\n      deathsToday: casesCountries[i][\"todayDeaths\"],\r\n      deathsPerOneMillion: casesCountries[i][\"deathsPerOneMillion\"],\r\n      tests: casesCountries[i][\"tests\"],\r\n      testsPerOneMillion: casesCountries[i][\"testsPerOneMillion\"],\r\n      population: casesCountries[i][\"population\"],\r\n      vaccinesAdministered: vaccineNumber,\r\n      percentVaccinated: ((0.5*vaccineNumber)/casesCountries[i][\"population\"])\r\n    });\r\n  }\r\n\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.name);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.name)}\r\n                      // role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      {/* <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                        </TableCell> */}\r\n                        \r\n\r\n{headCells.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      \r\n                      <TableCell key={column.id} align={column.align}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[10, 25, 50]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}",{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":16,"column":5,"nodeType":"162","messageId":"163","endLine":16,"endColumn":18},{"ruleId":"164","severity":1,"message":"165","line":71,"column":67,"nodeType":"166","messageId":"167","endLine":71,"endColumn":69},{"ruleId":"164","severity":1,"message":"165","line":77,"column":69,"nodeType":"166","messageId":"167","endLine":77,"endColumn":71},{"ruleId":"160","severity":1,"message":"168","line":12,"column":8,"nodeType":"162","messageId":"163","endLine":12,"endColumn":19},{"ruleId":"160","severity":1,"message":"169","line":518,"column":9,"nodeType":"162","messageId":"163","endLine":518,"endColumn":19},{"ruleId":"160","severity":1,"message":"169","line":643,"column":9,"nodeType":"162","messageId":"163","endLine":643,"endColumn":19},{"ruleId":"160","severity":1,"message":"169","line":763,"column":9,"nodeType":"162","messageId":"163","endLine":763,"endColumn":19},{"ruleId":"160","severity":1,"message":"170","line":6,"column":10,"nodeType":"162","messageId":"163","endLine":6,"endColumn":18},{"ruleId":"160","severity":1,"message":"171","line":34,"column":9,"nodeType":"162","messageId":"163","endLine":34,"endColumn":16},{"ruleId":"172","severity":1,"message":"173","line":1,"column":1,"nodeType":"174","messageId":"175","endLine":1,"endColumn":14,"fix":"176"},{"ruleId":"160","severity":1,"message":"177","line":18,"column":6,"nodeType":"162","messageId":"163","endLine":18,"endColumn":22},{"ruleId":"160","severity":1,"message":"178","line":20,"column":10,"nodeType":"162","messageId":"163","endLine":20,"endColumn":15},{"ruleId":"164","severity":1,"message":"165","line":50,"column":37,"nodeType":"166","messageId":"167","endLine":50,"endColumn":39},{"ruleId":"160","severity":1,"message":"179","line":2,"column":17,"nodeType":"162","messageId":"163","endLine":2,"endColumn":26},{"ruleId":"160","severity":1,"message":"180","line":2,"column":28,"nodeType":"162","messageId":"163","endLine":2,"endColumn":36},{"ruleId":"160","severity":1,"message":"181","line":5,"column":10,"nodeType":"162","messageId":"163","endLine":5,"endColumn":13},{"ruleId":"160","severity":1,"message":"182","line":16,"column":7,"nodeType":"162","messageId":"163","endLine":16,"endColumn":16},{"ruleId":"164","severity":1,"message":"165","line":329,"column":54,"nodeType":"166","messageId":"167","endLine":329,"endColumn":56},{"ruleId":"160","severity":1,"message":"169","line":447,"column":9,"nodeType":"162","messageId":"163","endLine":447,"endColumn":19},{"ruleId":"164","severity":1,"message":"165","line":506,"column":38,"nodeType":"166","messageId":"167","endLine":506,"endColumn":40},{"ruleId":"160","severity":1,"message":"169","line":672,"column":9,"nodeType":"162","messageId":"163","endLine":672,"endColumn":19},{"ruleId":"160","severity":1,"message":"169","line":847,"column":9,"nodeType":"162","messageId":"163","endLine":847,"endColumn":19},{"ruleId":"160","severity":1,"message":"183","line":858,"column":9,"nodeType":"162","messageId":"163","endLine":858,"endColumn":14},{"ruleId":"160","severity":1,"message":"184","line":862,"column":9,"nodeType":"162","messageId":"163","endLine":862,"endColumn":14},{"ruleId":"185","severity":1,"message":"186","line":898,"column":9,"nodeType":"187","messageId":"167","endLine":898,"endColumn":19},{"ruleId":"160","severity":1,"message":"169","line":948,"column":9,"nodeType":"162","messageId":"163","endLine":948,"endColumn":19},{"ruleId":"185","severity":1,"message":"186","line":978,"column":9,"nodeType":"187","messageId":"167","endLine":978,"endColumn":19},{"ruleId":"160","severity":1,"message":"169","line":1028,"column":9,"nodeType":"162","messageId":"163","endLine":1028,"endColumn":19},{"ruleId":"160","severity":1,"message":"169","line":1149,"column":9,"nodeType":"162","messageId":"163","endLine":1149,"endColumn":19},{"ruleId":"160","severity":1,"message":"188","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":22},{"ruleId":"160","severity":1,"message":"188","line":5,"column":8,"nodeType":"162","messageId":"163","endLine":5,"endColumn":22},{"ruleId":"160","severity":1,"message":"189","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":19},{"ruleId":"160","severity":1,"message":"190","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":14},{"ruleId":"160","severity":1,"message":"191","line":11,"column":8,"nodeType":"162","messageId":"163","endLine":11,"endColumn":12},{"ruleId":"160","severity":1,"message":"192","line":13,"column":27,"nodeType":"162","messageId":"163","endLine":13,"endColumn":33},{"ruleId":"160","severity":1,"message":"193","line":13,"column":35,"nodeType":"162","messageId":"163","endLine":13,"endColumn":40},{"ruleId":"164","severity":1,"message":"165","line":102,"column":29,"nodeType":"166","messageId":"167","endLine":102,"endColumn":31},{"ruleId":"160","severity":1,"message":"194","line":5,"column":10,"nodeType":"162","messageId":"163","endLine":5,"endColumn":20},{"ruleId":"160","severity":1,"message":"195","line":8,"column":8,"nodeType":"162","messageId":"163","endLine":8,"endColumn":18},{"ruleId":"160","severity":1,"message":"169","line":136,"column":13,"nodeType":"162","messageId":"163","endLine":136,"endColumn":23},{"ruleId":"160","severity":1,"message":"196","line":16,"column":8,"nodeType":"162","messageId":"163","endLine":16,"endColumn":16},{"ruleId":"160","severity":1,"message":"197","line":17,"column":8,"nodeType":"162","messageId":"163","endLine":17,"endColumn":18},{"ruleId":"160","severity":1,"message":"198","line":18,"column":8,"nodeType":"162","messageId":"163","endLine":18,"endColumn":15},{"ruleId":"160","severity":1,"message":"199","line":21,"column":8,"nodeType":"162","messageId":"163","endLine":21,"endColumn":18},{"ruleId":"160","severity":1,"message":"200","line":22,"column":8,"nodeType":"162","messageId":"163","endLine":22,"endColumn":22},{"ruleId":"160","severity":1,"message":"201","line":124,"column":20,"nodeType":"162","messageId":"163","endLine":124,"endColumn":36},{"ruleId":"160","severity":1,"message":"202","line":124,"column":54,"nodeType":"162","messageId":"163","endLine":124,"endColumn":65},{"ruleId":"160","severity":1,"message":"203","line":124,"column":67,"nodeType":"162","messageId":"163","endLine":124,"endColumn":75},{"ruleId":"164","severity":1,"message":"165","line":143,"column":32,"nodeType":"166","messageId":"167","endLine":143,"endColumn":34},{"ruleId":"160","severity":1,"message":"204","line":382,"column":25,"nodeType":"162","messageId":"163","endLine":382,"endColumn":32},{"ruleId":"160","severity":1,"message":"179","line":2,"column":17,"nodeType":"162","messageId":"163","endLine":2,"endColumn":26},{"ruleId":"160","severity":1,"message":"180","line":2,"column":28,"nodeType":"162","messageId":"163","endLine":2,"endColumn":36},{"ruleId":"164","severity":1,"message":"165","line":30,"column":45,"nodeType":"166","messageId":"167","endLine":30,"endColumn":47},{"ruleId":"160","severity":1,"message":"196","line":16,"column":8,"nodeType":"162","messageId":"163","endLine":16,"endColumn":16},{"ruleId":"160","severity":1,"message":"197","line":17,"column":8,"nodeType":"162","messageId":"163","endLine":17,"endColumn":18},{"ruleId":"160","severity":1,"message":"198","line":18,"column":8,"nodeType":"162","messageId":"163","endLine":18,"endColumn":15},{"ruleId":"160","severity":1,"message":"199","line":21,"column":8,"nodeType":"162","messageId":"163","endLine":21,"endColumn":18},{"ruleId":"160","severity":1,"message":"200","line":22,"column":8,"nodeType":"162","messageId":"163","endLine":22,"endColumn":22},{"ruleId":"160","severity":1,"message":"201","line":124,"column":20,"nodeType":"162","messageId":"163","endLine":124,"endColumn":36},{"ruleId":"160","severity":1,"message":"202","line":124,"column":54,"nodeType":"162","messageId":"163","endLine":124,"endColumn":65},{"ruleId":"160","severity":1,"message":"203","line":124,"column":67,"nodeType":"162","messageId":"163","endLine":124,"endColumn":75},{"ruleId":"164","severity":1,"message":"165","line":143,"column":32,"nodeType":"166","messageId":"167","endLine":143,"endColumn":34},{"ruleId":"160","severity":1,"message":"204","line":381,"column":25,"nodeType":"162","messageId":"163","endLine":381,"endColumn":32},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-unused-vars","'countryRouter' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'GlobalTable' is defined but never used.","'colorNames' is assigned a value but never used.","'Redirect' is defined but never used.","'classes' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"207","text":"208"},"'historyCountries' is defined but never used.","'count' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Pie' is defined but never used.","'useStyles' is assigned a value but never used.","'data2' is assigned a value but never used.","'data3' is assigned a value but never used.","no-dupe-keys","Duplicate key 'responsive'.","ObjectExpression","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'makeStyles' is defined but never used.","'Typography' is defined but never used.","'Checkbox' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'DeleteIcon' is defined but never used.","'FilterListIcon' is defined but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'labelId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[0,13],""]