{"version":3,"sources":["utils.js","App.js","GlobalCards.js","ContinentCharts.js","ContinentCards.js","GlobalTable.js","GlobalGraphs.js","reportWebVitals.js","index.js"],"names":["window","chartColors","red","orange","yellow","green","blue","purple","grey","global","i","s","o","r","a","m","MONTHS","COLORS","Samples","Color","utils","srand","seed","this","_seed","rand","min","max","undefined","numbers","config","value","cfg","from","count","decimals","continuity","dfactor","Math","pow","data","push","round","labels","step","prefix","values","months","section","ceil","substring","color","index","length","transparentize","opacity","alpha","rgbString","randomScalingFactor","Date","now","document","location","hostname","match","q","arguments","l","createElement","getElementsByTagName","async","src","parentNode","insertBefore","ga","App","id","className","icon","faGlobeAmericas","faCanadianMapleLeaf","faChartLine","faSearch","class","useStyles","makeStyles","root","marginBottom","media","height","MediaCard","classes","Card","style","borderTop","CardActionArea","CardMedia","image","title","CardContent","Typography","gutterBottom","variant","component","display","cases","toLocaleString","marginLeft","todayCases","marginTop","population","minimumFractionDigits","active","todayRecovered","critical","recovered","deaths","todayDeaths","ContinentCharts","labelContinents","casesContinents","casesPerCapContinents","deathsContinents","deathsPerCapContinents","fatalityRateContinents","props","datasets","label","backgroundColor","hoverBackgroundColor","options","text","fontSize","legend","position","tooltips","callbacks","tooltipItem","dataLabel","datasetIndex","Chart","helpers","isArray","slice","React","Component","continentCards","cardColor","ContinentCards","createCards","forceUpdate","testRun","width","role","margin","withStyles","GlobalTable","casesCountries","country","casesPerOneMillion","activeCases","deathsPerOneMillion","tests","testsPerOneMillion","columns","name","customBodyRender","filterType","GlobalGraphs","worldDeathChart","bind","worldConfirmedChart","worldDeathLogChart","worldConfirmedLogChart","state","historyGlobal","historyCountries","axios","all","get","then","spread","req1","req2","req3","req4","req5","setState","type","Object","keys","borderColor","fill","responsive","mode","intersect","hover","scales","xAxes","gridLines","drawBorder","drawOnChartArea","time","unit","scaleLabel","labelString","yAxes","ticks","beginAtZero","userCallback","toString","split","join","ctx","getElementById","getContext","myLine","textAlign","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9daa5754.chunk.js","sourcesContent":["'use strict';\n\nwindow.chartColors = {\n\tred: 'rgb(255, 99, 132)',\n\torange: 'rgb(255, 159, 64)',\n\tyellow: 'rgb(255, 205, 86)',\n\tgreen: 'rgb(75, 192, 192)',\n\tblue: 'rgb(54, 162, 235)',\n\tpurple: 'rgb(153, 102, 255)',\n\tgrey: 'rgb(201, 203, 207)'\n};\n\n(function(global) {\n\tvar MONTHS = [\n\t\t'January',\n\t\t'February',\n\t\t'March',\n\t\t'April',\n\t\t'May',\n\t\t'June',\n\t\t'July',\n\t\t'August',\n\t\t'September',\n\t\t'October',\n\t\t'November',\n\t\t'December'\n\t];\n\n\tvar COLORS = [\n\t\t'#4dc9f6',\n\t\t'#f67019',\n\t\t'#f53794',\n\t\t'#537bc4',\n\t\t'#acc236',\n\t\t'#166a8f',\n\t\t'#00a950',\n\t\t'#58595b',\n\t\t'#8549ba'\n\t];\n\n\tvar Samples = global.Samples || (global.Samples = {});\n\tvar Color = global.Color;\n\n\tSamples.utils = {\n\t\t// Adapted from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n\t\tsrand: function(seed) {\n\t\t\tthis._seed = seed;\n\t\t},\n\n\t\trand: function(min, max) {\n\t\t\tvar seed = this._seed;\n\t\t\tmin = min === undefined ? 0 : min;\n\t\t\tmax = max === undefined ? 1 : max;\n\t\t\tthis._seed = (seed * 9301 + 49297) % 233280;\n\t\t\treturn min + (this._seed / 233280) * (max - min);\n\t\t},\n\n\t\tnumbers: function(config) {\n\t\t\tvar cfg = config || {};\n\t\t\tvar min = cfg.min || 0;\n\t\t\tvar max = cfg.max || 1;\n\t\t\tvar from = cfg.from || [];\n\t\t\tvar count = cfg.count || 8;\n\t\t\tvar decimals = cfg.decimals || 8;\n\t\t\tvar continuity = cfg.continuity || 1;\n\t\t\tvar dfactor = Math.pow(10, decimals) || 0;\n\t\t\tvar data = [];\n\t\t\tvar i, value;\n\n\t\t\tfor (i = 0; i < count; ++i) {\n\t\t\t\tvalue = (from[i] || 0) + this.rand(min, max);\n\t\t\t\tif (this.rand() <= continuity) {\n\t\t\t\t\tdata.push(Math.round(dfactor * value) / dfactor);\n\t\t\t\t} else {\n\t\t\t\t\tdata.push(null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\n\t\tlabels: function(config) {\n\t\t\tvar cfg = config || {};\n\t\t\tvar min = cfg.min || 0;\n\t\t\tvar max = cfg.max || 100;\n\t\t\tvar count = cfg.count || 8;\n\t\t\tvar step = (max - min) / count;\n\t\t\tvar decimals = cfg.decimals || 8;\n\t\t\tvar dfactor = Math.pow(10, decimals) || 0;\n\t\t\tvar prefix = cfg.prefix || '';\n\t\t\tvar values = [];\n\t\t\tvar i;\n\n\t\t\tfor (i = min; i < max; i += step) {\n\t\t\t\tvalues.push(prefix + Math.round(dfactor * i) / dfactor);\n\t\t\t}\n\n\t\t\treturn values;\n\t\t},\n\n\t\tmonths: function(config) {\n\t\t\tvar cfg = config || {};\n\t\t\tvar count = cfg.count || 12;\n\t\t\tvar section = cfg.section;\n\t\t\tvar values = [];\n\t\t\tvar i, value;\n\n\t\t\tfor (i = 0; i < count; ++i) {\n\t\t\t\tvalue = MONTHS[Math.ceil(i) % 12];\n\t\t\t\tvalues.push(value.substring(0, section));\n\t\t\t}\n\n\t\t\treturn values;\n\t\t},\n\n\t\tcolor: function(index) {\n\t\t\treturn COLORS[index % COLORS.length];\n\t\t},\n\n\t\ttransparentize: function(color, opacity) {\n\t\t\tvar alpha = opacity === undefined ? 0.5 : 1 - opacity;\n\t\t\treturn Color(color).alpha(alpha).rgbString();\n\t\t}\n\t};\n\n\t// DEPRECATED\n\twindow.randomScalingFactor = function() {\n\t\treturn Math.round(Samples.utils.rand(-100, 100));\n\t};\n\n\t// INITIALIZATION\n\n\tSamples.utils.srand(Date.now());\n\n\t// Google Analytics\n\t/* eslint-disable */\n\tif (document.location.hostname.match(/^(www\\.)?chartjs\\.org$/)) {\n\t\t(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\t\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n\t\t})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\t\tga('create', 'UA-28909194-3', 'auto');\n\t\tga('send', 'pageview');\n\t}\n\t/* eslint-enable */\n\n}(this));\n","import './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobeAmericas } from '@fortawesome/free-solid-svg-icons';\nimport { faCanadianMapleLeaf } from '@fortawesome/free-brands-svg-icons';\nimport { faChartLine } from '@fortawesome/free-solid-svg-icons';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  return (\n    <div id = \"site-wrapper\">\n    <div className=\"App container-fluid\">\n      <div id = \"navbar\" className = \"row\">\n        <div className = \"nav-item col-3 text-center\" id = \"global-col\"><button>Global <FontAwesomeIcon icon={faGlobeAmericas}/></button></div>\n        <div className = \"nav-item col-3 text-center\" id = \"canada-col\"><button>Canada <FontAwesomeIcon icon={faCanadianMapleLeaf}/></button></div>\n        <div className = \"nav-item col-3 text-center\" id = \"compare-col\"><button>Compare <FontAwesomeIcon icon={faChartLine}/></button></div>\n        <div className = \"nav-item col-3 text-center\" id = \"search-col\"><button>Search <FontAwesomeIcon icon={faSearch}/></button></div>\n      </div>\n      <h1 class=\"display-4\" id = \"title-text\">Global Covid-19</h1>\n      <hr/>\n    </div>\n    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // maxWidth: 800,\r\n    marginBottom: \"10px\"},\r\n  media: {\r\n    height: 0,\r\n  },\r\n});\r\nexport default function MediaCard({data}) {\r\n  const classes = useStyles();\r\n\r\n        \r\n\r\n  return (\r\n    <div>\r\n      <div className = \"row\">\r\n      <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{borderTop: \"#00A6B4 5px solid\"}}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            Total Confirmed Cases\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{display: \"inline\"}}>\r\n            {data.cases.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" style={{color: \"red\", display: \"inline\", marginLeft: 10}}>\r\n          +{data.todayCases.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {((data.cases)/(data.population)).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})} of Global Population\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n    </div>\r\n\r\n    <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{borderTop: \"#C9DE00 5px solid\"}}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            Total Active Cases\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{display: \"inline\"}}>\r\n            {data.active.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" style={{color: ((data.todayCases - data.todayRecovered)<0?\"green\":\"red\"), display: \"inline\", marginLeft: 10}}>\r\n          {(data.todayCases - data.todayRecovered)<0?\"\":\"+\"}{(data.todayCases - data.todayRecovered).toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {(data.critical.toLocaleString())} Remain in Critical Condition\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n    </div>\r\n\r\n    <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{borderTop: \"#2FDE00 5px solid\"}}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Covid-19\"\r\n        />\r\n        <CardContent>\r\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            Total Recovered\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{display: \"inline\"}}>\r\n            {data.recovered.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{color: \"green\", display: \"inline\", marginLeft: 10}}>\r\n          +{data.todayRecovered.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {((data.recovered)/(data.cases)).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})} of Confirmed Cases\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n    </div>\r\n    <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{borderTop: \"#B21F00 5px solid\"}}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            Total Deaths\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{display: \"inline\"}}>\r\n            {data.deaths.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" style={{color: \"red\", display: \"inline\", marginLeft: 10}}>\r\n          +{data.todayDeaths.toLocaleString()}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {((data.deaths)/(data.cases)).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2})} of Confirmed Cases\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n    </div>\r\n    </div>\r\n    </div>\r\n  \r\n  );\r\n}\r\n","import \"./index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Chart from \"chart.js\";\r\nimport \"./utils\";\r\nimport { Pie, Doughnut } from 'react-chartjs-2';\r\n\r\nexport default class ContinentCharts extends React.Component {\r\n\r\n\r\n  render() {\r\n\r\n    let labelContinents = [];\r\n    let casesContinents = [];\r\n    let casesPerCapContinents = [];\r\n    let deathsContinents = [];\r\n    let deathsPerCapContinents = [];\r\n    let fatalityRateContinents = [];\r\n\r\n    for (let i = 0; i < (this.props.casesContinents).length; i++) {\r\n      labelContinents.push(this.props.casesContinents[i][\"continent\"]);\r\n      casesContinents.push(this.props.casesContinents[i][\"cases\"]);\r\n      deathsContinents.push(this.props.casesContinents[i][\"deaths\"]);\r\n      casesPerCapContinents.push(this.props.casesContinents[i][\"casesPerOneMillion\"]);\r\n      deathsPerCapContinents.push(this.props.casesContinents[i][\"deathsPerOneMillion\"]);\r\n      fatalityRateContinents.push((this.props.casesContinents[i][\"deaths\"])/(this.props.casesContinents[i][\"cases\"]));\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-xs-12 col-md-6\"> \r\n        <Pie\r\n          data={{\r\n            labels: labelContinents,\r\n            datasets: [\r\n              {\r\n                label: 'Rainfall',\r\n                backgroundColor: [\r\n                  '#B21F00',\r\n                  '#C9DE00',\r\n                  '#2FDE00',\r\n                  '#00A6B4',\r\n                  '#6800B4',\r\n                  'orange'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                  '#501800',\r\n                  '#4B5000',\r\n                  '#175000',\r\n                  '#003350',\r\n                  '#35014F',\r\n                  'orange'\r\n                ],\r\n                data: casesContinents\r\n              }\r\n            ]\r\n          }}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Confirmed Cases\",\r\n              fontSize: 20\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: 'right'\r\n            },\r\n            tooltips: {\r\n              callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                  var dataLabel = data.labels[tooltipItem.index];\r\n                  var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();\r\n        \r\n                  if (Chart.helpers.isArray(dataLabel)) {\r\n                    dataLabel = dataLabel.slice();\r\n                    dataLabel[0] += value;\r\n                  } else {\r\n                    dataLabel += value;\r\n                  }\r\n                  return dataLabel;\r\n                }\r\n              }\r\n          }\r\n           }}\r\n        />\r\n\r\n        </div>\r\n        <div className=\"col-xs-12 col-md-6\"> \r\n        <Pie\r\n          data={{\r\n            labels: labelContinents,\r\n            datasets: [\r\n              {\r\n                label: 'Rainfall',\r\n                backgroundColor: [\r\n                  '#B21F00',\r\n                  '#C9DE00',\r\n                  '#2FDE00',\r\n                  '#00A6B4',\r\n                  '#6800B4',\r\n                  'orange'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                  '#501800',\r\n                  '#4B5000',\r\n                  '#175000',\r\n                  '#003350',\r\n                  '#35014F',\r\n                  'orange'\r\n                ],\r\n                data: casesPerCapContinents\r\n              }\r\n            ]\r\n          }}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Confirmed Cases Per Million\",\r\n              fontSize: 20\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: 'right'\r\n            },\r\n            tooltips: {\r\n              callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                  var dataLabel = data.labels[tooltipItem.index];\r\n                  var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();\r\n        \r\n                  if (Chart.helpers.isArray(dataLabel)) {\r\n                    dataLabel = dataLabel.slice();\r\n                    dataLabel[0] += value;\r\n                  } else {\r\n                    dataLabel += value;\r\n                  }\r\n                  return dataLabel;\r\n                }\r\n              }\r\n          }\r\n           }}\r\n        />\r\n\r\n        </div>\r\n        </div>\r\n        \r\n        <div className = \"row\">\r\n\r\n        <div className=\"col-xs-12 col-md-6\">\r\n          <Pie\r\n            data={{\r\n              labels: labelContinents,\r\n              datasets: [\r\n                {\r\n                  label: 'Rainfall',\r\n                  backgroundColor: [\r\n                    '#B21F00',\r\n                    '#C9DE00',\r\n                    '#2FDE00',\r\n                    '#00A6B4',\r\n                    '#6800B4',\r\n                    'orange'\r\n                  ],\r\n                  hoverBackgroundColor: [\r\n                    '#501800',\r\n                    '#4B5000',\r\n                    '#175000',\r\n                    '#003350',\r\n                    '#35014F',\r\n                    'orange'\r\n                  ],\r\n                  data: deathsContinents\r\n                }\r\n              ]\r\n            }}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: 'Deaths',\r\n                fontSize: 20\r\n              },\r\n              legend: {\r\n                display: true,\r\n                position: 'right'\r\n              },\r\n              tooltips: {\r\n                callbacks: {\r\n                  label: function(tooltipItem, data) {\r\n                    var dataLabel = data.labels[tooltipItem.index];\r\n                    var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();\r\n          \r\n                    if (Chart.helpers.isArray(dataLabel)) {\r\n                      dataLabel = dataLabel.slice();\r\n                      dataLabel[0] += value;\r\n                    } else {\r\n                      dataLabel += value;\r\n                    }\r\n                    return dataLabel;\r\n                  }\r\n                }\r\n            }\r\n             }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-xs-12 col-md-6\">\r\n          <Pie\r\n            data={{\r\n              labels: labelContinents,\r\n              datasets: [\r\n                {\r\n                  label: 'Rainfall',\r\n                  backgroundColor: [\r\n                    '#B21F00',\r\n                    '#C9DE00',\r\n                    '#2FDE00',\r\n                    '#00A6B4',\r\n                    '#6800B4',\r\n                    'orange'\r\n                  ],\r\n                  hoverBackgroundColor: [\r\n                    '#501800',\r\n                    '#4B5000',\r\n                    '#175000',\r\n                    '#003350',\r\n                    '#35014F',\r\n                    'orange'\r\n                  ],\r\n                  data: deathsPerCapContinents\r\n                }\r\n              ]\r\n            }}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: 'Deaths Per Million',\r\n                fontSize: 20\r\n              },\r\n              legend: {\r\n                display: true,\r\n                position: 'right'\r\n              },\r\n              tooltips: {\r\n                callbacks: {\r\n                  label: function(tooltipItem, data) {\r\n                    var dataLabel = data.labels[tooltipItem.index];\r\n                    var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();\r\n          \r\n                    if (Chart.helpers.isArray(dataLabel)) {\r\n                      dataLabel = dataLabel.slice();\r\n                      dataLabel[0] += value;\r\n                    } else {\r\n                      dataLabel += value;\r\n                    }\r\n                    return dataLabel;\r\n                  }\r\n                }\r\n            }\r\n             }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-xs-12 col-md-6\"> \r\n        <Pie\r\n          data={{\r\n            labels: labelContinents,\r\n            datasets: [\r\n              {\r\n                label: 'Rainfall',\r\n                backgroundColor: [\r\n                  '#B21F00',\r\n                  '#C9DE00',\r\n                  '#2FDE00',\r\n                  '#00A6B4',\r\n                  '#6800B4',\r\n                  'orange'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                  '#501800',\r\n                  '#4B5000',\r\n                  '#175000',\r\n                  '#003350',\r\n                  '#35014F',\r\n                  'orange'\r\n                ],\r\n                data: fatalityRateContinents\r\n              }\r\n            ]\r\n          }}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Fatality Rate\",\r\n              fontSize: 20\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: 'right'\r\n            },\r\n            tooltips: {\r\n              callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                  var dataLabel = data.labels[tooltipItem.index];\r\n                  var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2});\r\n        \r\n                  if (Chart.helpers.isArray(dataLabel)) {\r\n                    dataLabel = dataLabel.slice();\r\n                    dataLabel[0] += value;\r\n                  } else {\r\n                    dataLabel += value;\r\n                  }\r\n                  return dataLabel;\r\n                }\r\n              }\r\n          }\r\n           }}\r\n        />\r\n\r\n        </div>\r\n        </div>\r\n        <hr/>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // maxWidth: 800,\r\n    marginBottom: \"10px\"},\r\n  media: {\r\n    height: 5,\r\n  },\r\n});\r\n\r\n\r\nlet labelContinents = [];\r\nlet casesContinents = [];\r\nlet casesPerCapContinents = [];\r\nlet deathsContinents = [];\r\nlet deathsPerCapContinents = [];\r\nlet fatalityRateContinents = [];\r\nlet continentCards = [];\r\n\r\nlet cardColor= [\r\n  '#B21F00',\r\n  '#C9DE00',\r\n  '#2FDE00',\r\n  '#00A6B4',\r\n  '#6800B4',\r\n  'orange'\r\n]\r\n\r\nclass ContinentCards extends React.Component {\r\n \r\n\r\n\r\n  testRun() {\r\n\r\n    for (let i = 0; i < (this.props.casesContinents).length; i++) {\r\n      labelContinents.push(this.props.casesContinents[i][\"continent\"]);\r\n      casesContinents.push(this.props.casesContinents[i][\"cases\"]);\r\n      deathsContinents.push(this.props.casesContinents[i][\"deaths\"]);\r\n      casesPerCapContinents.push(this.props.casesContinents[i][\"casesPerOneMillion\"]);\r\n      deathsPerCapContinents.push(this.props.casesContinents[i][\"deathsPerOneMillion\"]);\r\n      fatalityRateContinents.push((this.props.casesContinents[i][\"deaths\"])/(this.props.casesContinents[i][\"cases\"]));\r\n      this.createCards();\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.testRun();\r\n  };\r\n\r\n  createCards() {\r\n    const { classes } = this.props;\r\n    for (let i = 0; i < labelContinents.length; i++) {\r\n      continentCards[i] = (\r\n        <div className = \"col-xs-8 offset-xs-2 col-sm-6 col-lg-3\">\r\n    <Card className={classes.root} style = {{marginBottom: 10, borderTop: cardColor[i] + \" 5px solid\"}}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image = './Coronavirus_3D_illustration_by_CDC_1600x900.png'\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n            {labelContinents[i]}\r\n          </Typography>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {casesContinents[i].toLocaleString()} cases\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\" style={{color: \"red\"}}>\r\n          {deathsContinents[i].toLocaleString()} deaths\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" style={{marginTop: 5}}>\r\n            {(fatalityRateContinents[i].toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2}))} Fatality Rate\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n    </div>\r\n\r\n      )\r\n    }\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n\r\n    if (labelContinents.length == 0) {\r\n      return (\r\n        <div class=\"text-center\">\r\n          <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n            <span className=\"visually-hidden\"></span>\r\n          </div>\r\n          <h3 id=\"loading-text\">Loading...</h3>\r\n        </div>\r\n      )\r\n    }\r\n    for (let i = 0; i < labelContinents.length; i++) {\r\n      return (\r\n        <div> \r\n          <h1 class=\"display-4 text-center\" id = \"continent-text\" style = {{fontSize: \"3rem\", margin: 25}}>Covid-19 by Continent</h1>\r\n          <hr/>\r\n        <div className = \"row\">\r\n          {continentCards} \r\n    </div>\r\n    <hr/>\r\n    </div>\r\n\r\n      )\r\n    }}}\r\n    export default withStyles(useStyles)(ContinentCards);","import * as React from 'react';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default class GlobalTable extends React.Component {\r\n\r\n    render() {\r\n        var columns = [\r\n            { name: 'country', label: 'Country'},\r\n            { name: 'cases', label: 'Cases', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'casesPerOneMillion', label: 'Cases Per One Million', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'activeCases', label: ' Active Cases', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'critical', label: 'Critical', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'recovered', label: 'Recovered', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'deaths', label: 'Deaths', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'deathsPerOneMillion', label: 'Deaths Per One Million', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'tests', label: 'Tests', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'testsPerOneMillion', label: 'Tests Per One Million', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n            { name: 'population', label: 'Population', options: {\r\n                customBodyRender: value => value?value.toLocaleString():null}},\r\n        ];\r\n        \r\n        const options = {\r\n            filterType: 'checkbox',\r\n          };\r\n        var data = [];\r\n\r\n            for (let i = 0; i < this.props.casesCountries.length; i++) {\r\n                data.push({\r\n                    country: this.props.casesCountries[i][\"country\"],\r\n                    cases: this.props.casesCountries[i][\"cases\"],\r\n                    casesPerOneMillion: this.props.casesCountries[i][\"casesPerOneMillion\"],\r\n                    activeCases: this.props.casesCountries[i][\"active\"],\r\n                    critical: this.props.casesCountries[i][\"critical\"],\r\n                    recovered: this.props.casesCountries[i][\"recovered\"],\r\n                    deaths: this.props.casesCountries[i][\"deaths\"],\r\n                    deathsPerOneMillion: this.props.casesCountries[i][\"deathsPerOneMillion\"],\r\n                    tests: this.props.casesCountries[i][\"tests\"],\r\n                    testsPerOneMillion: this.props.casesCountries[i][\"testsPerOneMillion\"],\r\n                    population: this.props.casesCountries[i][\"population\"]\r\n                })\r\n            } \r\n\r\n        return (\r\n            <div>\r\n                <h1 class=\"display-4 text-center\" id=\"continent-text\" style={{ fontSize: \"3rem\", margin: 25 }}>Covid-19 by Country</h1>\r\n                <hr/>\r\n\r\n                <div>\r\n                    <MUIDataTable \r\n                    title= {\"Covid-19 Data by Country\"} \r\n                    data={data}\r\n                    columns={columns} \r\n                    options={options} />\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import \"./index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Chart from \"chart.js\";\r\nimport \"./utils\";\r\nimport MediaCard from \"./GlobalCards\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport ContinentCharts from \"./ContinentCharts\";\r\nimport ContinentCards from \"./ContinentCards\";\r\nimport axios from 'axios';\r\nimport GlobalTable from \"./GlobalTable\";\r\n\r\nclass GlobalGraphs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.worldDeathChart = this.worldDeathChart.bind(this);\r\n    this.worldConfirmedChart = this.worldConfirmedChart.bind(this);\r\n    this.worldDeathLogChart = this.worldDeathLogChart.bind(this);\r\n    this.worldConfirmedLogChart = this.worldConfirmedLogChart.bind(this);\r\n\r\n    this.state = {\r\n      historyGlobal: null,\r\n      historyCountries: null,\r\n      cases: null,\r\n      casesContinents: null,\r\n      casesCountries: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.all([\r\n      axios.get('https://disease.sh/v3/covid-19/all?yesterday=false'),\r\n      axios.get('https://disease.sh/v3/covid-19/historical/all?lastdays=all'),\r\n      axios.get('https://disease.sh/v3/covid-19/historical?lastdays=all'),\r\n      axios.get('https://disease.sh/v3/covid-19/continents?yesterday=false&twoDaysAgo=false&allowNull=true'),\r\n      axios.get('https://disease.sh/v3/covid-19/countries?yesterday=false&twoDaysAgo=false&sort=cases&allowNull=true')\r\n    ])\r\n    .then(axios.spread((req1, req2, req3, req4, req5) => {\r\n      this.setState({\r\n        cases: req1.data,\r\n        historyGlobal: req2.data,\r\n        historyCountries: req3.data,\r\n        casesContinents: req4.data,\r\n        casesCountries: req5.data\r\n      });\r\n      this.worldDeathChart();\r\n      this.worldConfirmedChart(); \r\n      this.worldDeathLogChart();\r\n      this.worldConfirmedLogChart();\r\n    }));\r\n  }\r\n\r\n  worldConfirmedChart() {\r\n    var date = Object.keys(this.state.historyGlobal.cases);\r\n    var data1 = Object.values(this.state.historyGlobal.cases);\r\n    var config = {\r\n      type: \"line\",\r\n      data: {\r\n        labels: date,\r\n        datasets: [\r\n          {\r\n            label: \"Cases\",\r\n            backgroundColor: \"#00A6B4\",\r\n            borderColor: \"#00A6B4\",\r\n            data: data1,\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false,\r\n          position: \"bottom\",\r\n        },\r\n        responsive: true,\r\n        title: {\r\n          display: true,\r\n          text: \"Cases\",\r\n          fontSize: 20,\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function(tooltipItem, data) {\r\n              var dataLabel = data.labels[tooltipItem.index];\r\n              var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();\r\n    \r\n              if (Chart.helpers.isArray(dataLabel)) {\r\n                dataLabel = dataLabel.slice();\r\n                dataLabel[0] += value;\r\n              } else {\r\n                dataLabel += value;\r\n              }\r\n              return dataLabel;\r\n            }\r\n          }\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              type: \"time\",\r\n              time: {\r\n                unit: \"day\",\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Time\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n                userCallback: function (value, index, values) {\r\n                  value = value.toString();\r\n                  value = value.split(/(?=(?:...)*$)/);\r\n                  value = value.join(\",\");\r\n                  return value;\r\n                },\r\n              },\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Cases\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n    var ctx = document.getElementById(\"canvasConfirmed\").getContext(\"2d\");\r\n    window.myLine = new Chart(ctx, config);\r\n\r\n    var colorNames = Object.keys(window.chartColors);\r\n  }\r\n\r\n  worldConfirmedLogChart() {\r\n    var date = Object.keys(this.state.historyGlobal.cases);\r\n    var data1 = Object.values(this.state.historyGlobal.cases);\r\n    var config = {\r\n      type: \"line\",\r\n      data: {\r\n        labels: date,\r\n        datasets: [\r\n          {\r\n            label: \"Global\",\r\n            backgroundColor: \"#00A6B4\",\r\n            borderColor: \"#00A6B4\",\r\n            data: data1,\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false,\r\n          position: \"bottom\",\r\n        },\r\n        responsive: true,\r\n        title: {\r\n          display: true,\r\n          text: \"Cases (Log)\",\r\n          fontSize: 20,\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function(tooltipItem, data) {\r\n              var dataLabel = data.labels[tooltipItem.index];\r\n              var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();\r\n    \r\n              if (Chart.helpers.isArray(dataLabel)) {\r\n                dataLabel = dataLabel.slice();\r\n                dataLabel[0] += value;\r\n              } else {\r\n                dataLabel += value;\r\n              }\r\n              return dataLabel;\r\n            }\r\n          }\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              type: \"time\",\r\n              time: {\r\n                unit: \"day\",\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Time\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              type: \"logarithmic\",\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Cases\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n    var ctx = document.getElementById(\"canvasConfirmedLog\").getContext(\"2d\");\r\n    window.myLine = new Chart(ctx, config);\r\n\r\n    var colorNames = Object.keys(window.chartColors);\r\n  }\r\n\r\n  worldDeathChart() {\r\n    var date = Object.keys(this.state.historyGlobal.deaths);\r\n    var data1 = Object.values(this.state.historyGlobal.deaths);\r\n    var config = {\r\n      type: \"line\",\r\n      data: {\r\n        labels: date,\r\n        datasets: [\r\n          {\r\n            label: \"Global\",\r\n            backgroundColor: \"#B21F00\",\r\n            borderColor: \"#B21F00\",\r\n            data: data1,\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false,\r\n          position: \"bottom\",\r\n        },\r\n        responsive: true,\r\n        title: {\r\n          display: true,\r\n          text: \"Deaths\",\r\n          fontSize: 20,\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function(tooltipItem, data) {\r\n              var dataLabel = data.labels[tooltipItem.index];\r\n              var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();\r\n    \r\n              if (Chart.helpers.isArray(dataLabel)) {\r\n                dataLabel = dataLabel.slice();\r\n                dataLabel[0] += value;\r\n              } else {\r\n                dataLabel += value;\r\n              }\r\n              return dataLabel;\r\n            }\r\n          }\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              type: \"time\",\r\n              time: {\r\n                unit: \"day\",\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Time\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n                userCallback: function (value, index, values) {\r\n                  value = value.toString();\r\n                  value = value.split(/(?=(?:...)*$)/);\r\n                  value = value.join(\",\");\r\n                  return value;\r\n                },\r\n              },\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Cases\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n    var ctx = document.getElementById(\"canvasDeaths\").getContext(\"2d\");\r\n    window.myLine = new Chart(ctx, config);\r\n\r\n    var colorNames = Object.keys(window.chartColors);\r\n  }\r\n\r\n  worldDeathLogChart() {\r\n    var date = Object.keys(this.state.historyGlobal.deaths);\r\n    var data1 = Object.values(this.state.historyGlobal.deaths);\r\n    var config = {\r\n      type: \"line\",\r\n      data: {\r\n        labels: date,\r\n        datasets: [\r\n          {\r\n            label: \"Global\",\r\n            backgroundColor: \"#B21F00\",\r\n            borderColor: \"#B21F00\",\r\n            data: data1,\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false,\r\n          position: \"bottom\",\r\n        },\r\n        responsive: true,\r\n        title: {\r\n          display: true,\r\n          text: \"Deaths (Log)\",\r\n          fontSize: 20,\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              type: \"time\",\r\n              time: {\r\n                unit: \"day\",\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Time\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              type: \"logarithmic\",\r\n              ticks: {\r\n                beginAtZero: true\r\n              },\r\n              gridLines: {\r\n                display: true,\r\n                drawBorder: true,\r\n                drawOnChartArea: false,\r\n              },\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Cases\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n    var ctx = document.getElementById(\"canvasDeathsLog\").getContext(\"2d\");\r\n    window.myLine = new Chart(ctx, config);\r\n\r\n    var colorNames = Object.keys(window.chartColors);\r\n  }\r\n\r\n  \r\n\r\n\r\n  render() {\r\n\r\n    if (this.state.cases == null || this.state.historyCountries == null || this.state.casesContinents == null) {\r\n      return (\r\n        <div class=\"text-center\">\r\n          \r\n  <div className=\"spinner-border\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\r\n    <span className=\"visually-hidden\"></span>\r\n  </div>\r\n  <h3 id = \"loading-text\">Loading...</h3>\r\n</div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"GlobalGraphs container-fluid\">\r\n              <MediaCard data = {this.state.cases} />\r\n              <hr/>\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n            <Card style = {{marginBottom: \"10px\"}}><CardActionArea><CardContent><canvas id=\"canvasConfirmed\"></canvas></CardContent></CardActionArea></Card>\r\n          </div>\r\n          <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n          <Card style = {{marginBottom: \"10px\"}}><CardActionArea><CardContent><canvas id=\"canvasConfirmedLog\"></canvas></CardContent></CardActionArea></Card>\r\n          </div>\r\n          </div>\r\n          <div className = \"row\">\r\n          <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n          <Card style = {{marginBottom: \"10px\"}}><CardActionArea><CardContent><canvas id=\"canvasDeaths\"></canvas></CardContent></CardActionArea></Card>\r\n          </div>\r\n          <div className=\"col-xs-10 offset-xs-1 col-lg-6\">\r\n          <Card style = {{marginBottom: \"10px\"}}><CardActionArea><CardContent><canvas id=\"canvasDeathsLog\"></canvas></CardContent></CardActionArea></Card>\r\n          </div>\r\n        </div>\r\n        <hr/>\r\n        <ContinentCards casesContinents = {this.state.casesContinents} />\r\n        <ContinentCharts casesContinents = {this.state.casesContinents} />\r\n        <GlobalTable casesCountries = {this.state.casesCountries}/>\r\n        <div className = \"row\">\r\n      <div className = \"col-12 text-center\">\r\n        <p style = {{textAlign:\"center\", fontSize: \"1rem\"}}>Last Updated: {(new Date(this.state.cases[\"updated\"])).toString()}</p>\r\n      </div>\r\n      <hr/>\r\n      <div className = \"col-12 text-center\">\r\n      <p id = \"olivera\" style = {{textAlign:\"center\", fontSize: \"1rem\"}}>developed by <a href = \"https://www.olivera.tech\">olivera.tech</a></p>\r\n\r\n      </div>\r\n      </div>\r\n        {/* <CanadaGraph historyConfirmed = {this.state.historyConfirmed} /> */}\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default GlobalGraphs;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport GlobalGraphs from './GlobalGraphs'\nimport reportWebVitals from './reportWebVitals';\nimport CanadaGraphs from './CanadaGraphs';\nimport MediaCard from './GlobalCards';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GlobalGraphs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}